结构体是值类型
结构体的4种创建方式
package main
import "fmt"
 
type Person struct {
   Name string
   Age int
}
 
func main()  {
   //方法一
   var person Person
   person.Name = "zhangsan"
   person.Age = 20
   fmt.Println(person)
 
   //方法二
   person1 := Person{"zhangsan1", 21}
   fmt.Println(person1)
 
   //方法三，此处(*person2).Name 等同于 person2.Name ，其他属性同理,因为go语言设计者在底层做了相关处理
   var person2  = new(Person)
   //(*person2).Name = "zhangsan2"
   person2.Name = "zhangsan2"
   (*person2).Age = 22
   fmt.Println(*person2)
 
   //方法四，此处(*person3).Name 等同于 person3.Name ，其他属性同理
   var person3 =&Person{}
   (*person3).Name = "zhangsan3"
   (*person3).Age = 23
   fmt.Println(*person3)
}

创建结构体示例时，可以直接指定字段的值
方式1 
var stu  Student=Student{"value1","value2","value3"}//直接对应结构体的field顺序来排列
方式2
var stu  Student =Student{
	key1:"value1",
	key2:"value2",
	key3:"value3",
}

结构体市用户单独定义的类型，和其它类型进行转换时需要有完全相同的字段（名字，个数和类型）

将结构体序列化成json传递
type Person struct {
   Name string   `json:"name"`
   Age int            `json:"age"`
}
jsonStr,err:=json.Marshal(person)


结构体调用
package model
type Box struct {
	Width  float64
	Height float64
	Length float64
}
调用：
func main() {
	var box =model.Box{//结构体名需要大写
		Width  : 10.1,//字段名需要大写
		Height : 10.2,
		Length : 10.3,
	}
	fmt.Printf("%v", box)
}