Go语言是静态类型语言，因此变量（variable）是有明确类型的，编译器也会检查变量类型的正确性。

声明变量的一般形式是使用 var 关键字：
var name type
其中，var 是声明变量的关键字，name 是变量名，type 是变量的类型。

当一个变量被声明之后，系统自动赋予它该类型的零值：
int 为 0，float 为 0.0，bool 为 false，string 为空字符串，指针为 nil 等。
所有的内存在 Go 中都是经过初始化的。

批量格式：
var (
    a int
    b string
    c []float32
    d func() bool
    e struct {
        x int
    }
)

简短格式
名字 := 表达式

需要注意的是，简短模式（short variable declaration）有以下限制：
定义变量，同时显式初始化。
不能提供数据类型。
只能用在函数内部。

和 var 形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：
i, j := 0, 1

变量初始化的标准格式
var 变量名 类型 = 表达式

例如，游戏中，玩家的血量初始值为100。可以这样写：
var hp int = 100

编译器推导类型的格式
在标准格式的基础上，将 int 省略后，编译器会尝试根据等号右边的表达式推导 hp 变量的类型。
var hp = 100

短变量声明并初始化
名字 := 表达式

如果 hp 已经被声明过，但依然使用:=时编译器会报错，代码如下：
// 声明 hp 变量
var hp int
// 再次声明并赋值
hp := 10
编译报错如下：
no new variables on left side of :=
意思是，在“:=”的左边没有新变量出现，意思就是“:=”的左边变量已经被声明了。

var a int = 100
var b int = 200
b, a = a, b
fmt.Println(a, b)
多重赋值时，变量的左值和右值按从左到右的顺序赋值。

匿名变量的特点是一个下画线“_”，“_”本身就是一个特殊的标识符，被称为空白标识符。
a, _ := GetData()