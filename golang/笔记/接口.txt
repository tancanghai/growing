接口
type 接口名  interface{
     method1(参数)返回值列表
     method2(参数)返回值列表
}
实现接口所有方法
func(自定义类型)method1(参数列表)返回值列表{
//实现方法
}
func(自定义类型)method2(参数列表)返回值列表{
//实现方法
}

1.在go中，一个自定义类型需要将某个接口的所有方法都实现，我们说这个自定义类型实现了该接口。
2.一个自定义类型只有实现了某个接口，才能将该类型的示例（变量）赋给该接口
    var stu Stu
    var a  interface=stu//赋
    a.Say()
3.只要是自定义数据类型，就可以实现接口，不仅仅是结构体类型
4.接口中不能有任何变量
5.一个自定义类型可以实现多个接口
6.一个a接口可以继承多个b,c接口，如果要实现这个接口需要把a,b,c接口的方法都实现
7.interface类型默认是一个指针（引用类型），如果没有对interface初始化就使用，那么会输出nil
8.空接口interface{}没有任何方法，所以所有类型都可以赋给空接口
type T interface{
}
    var t  T=stu// 把stu类型赋给T接口


例子：
package main
import (
    "fmt"
)
// 定义一个数据写入器
type DataWriter interface {
    WriteData(data interface{}) error
}
// 定义文件结构，用于实现DataWriter
type file struct {
}
// 实现DataWriter接口的WriteData方法
func (d *file) WriteData(data interface{}) error {
    // 模拟写入数据
    fmt.Println("WriteData:", data)
    return nil
}
func main() {
    // 实例化file
    f := new(file)
    // 声明一个DataWriter的接口
    var writer DataWriter
    // 将接口赋值f，也就是*file类型
    writer = f
    // 使用DataWriter接口进行数据写入
    writer.WriteData("data")
}