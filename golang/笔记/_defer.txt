
func  init(){
	//当执行到derer时，暂时不执行，会将defer后面的语句压入到独立的栈中,同时将 此时的变量值 压入栈中
	//当函数执行完毕后，在从defer栈，按照先入后出的方式出栈执行
	//defer最主要的价值是在当函数执行完毕后，可以及时的释放函数创建的资源。
	//在golang编程中的通常做法是，创建资源后比如（打开了文件获取了数据库的连接或者是锁资源）可以执行defer file.Close()  defer connect.Close()
	//这种机制，非常简洁，程序员不用再为在什么时机关闭资源而烦心
	var n1 int = 111
	var n2 int = 222
	var n3 int = 333
	var n4 int = 444

	defer fmt.Println("n1=",n1)
	defer fmt.Println("n2=",n2)
	n1= n2+n3
    fmt.Println("n3=",n3)
	fmt.Println("n4=",n4)
	return
}
n3= 333
n4= 444
n2= 222
n1= 111
400 100