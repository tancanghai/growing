    //设置sign 把一个定一好的数组例如（把header头里头部分信息）拼装成字符串加密然后 校验数据合法性
    //例如：did 对比header头信息和sign里头信息是否对应的上
    public static function setSign($data = [])
    {
        //1.按字段排序
        ksort($data);
        //拼接成字符串
        $str = http_build_query($data);//自己定义所需要的数据 例如 k=3&dd=44&did=22298888
        //aes加密
        $string = Aes2:: encrypt($str);
        return $string;
    }

    //设置13位的时间戳  取13就是为了防止和did重复生成唯一的did  k=3&dd=44&did=22298888  当解密sign时候对比header头中的did是否对应 did=IAuth::setTime(),
    public static function setTime()
    {
        list($time1, $time2) = explode(' ', microtime());//0.27165800 1379776428
        $time = $time2.ceil($time1 * 1000);//ceil()ceil — 进一法取整
        return $time;
    }

    //检查sign是否通过
    public function signCheckPass( $header = [])
    {
        //sign的唯一性 //文件缓存
        if(Cache::get($header['sign'])){
            return false;
        }
        //解密
        $str = Aes2::decrypt($header['sign']);
        //在上面已经校验了
        if (empty($str)) {
            return false;
        }
        //parse_str — 将字符串解析成多个变量
        parse_str($str, $array);
        //自己定义所需要的数据 例如 k=3&dd=44&did=22298888   可以多校验 也可以校验k参数合法性
        if (!is_array($array) || empty($array['did']) || $array['did'] != $header['did']) {//校验did合法   当解密sign时候对比header头中的did是否对应
            return false;
        }

        //设置请求过时时间
        if(time()-ceil($array['time']/1000)>config('app_sign_time')){
            throw new ApiException('过时失效', 401);
        }
        return true;
    }
